"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestToken = exports.setToken = exports.requestProduct = exports.execute = void 0;
var constant_1 = require("./constant");
var messageconstant_1 = require("./messageconstant");
var request_1 = __importDefault(require("request"));
/**
 *  CODEF API 통신요청
 * @param codef
 * @param serviceType
 * @param productURL
 * @param param
 * @returns {Promise<unknown>}
 */
function execute(codef, serviceType, productURL, param) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                // 토큰 셋팅
                return [4 /*yield*/, setToken(serviceType, codef)];
                case 1:
                    // 토큰 셋팅
                    _a.sent();
                    return [4 /*yield*/, requestProduct(serviceType, productURL, codef, param)];
                case 2:
                    result = _a.sent();
                    if (!(result === 'invalid_token')) return [3 /*break*/, 4];
                    // 액세스 토큰 유효기간 만료시 재 요청
                    codef.setAccessToken(serviceType, '');
                    return [4 /*yield*/, execute(codef, serviceType, productURL, param)];
                case 3: return [2 /*return*/, _a.sent()];
                case 4: return [2 /*return*/, result];
            }
        });
    });
}
exports.execute = execute;
/**
 * 코드에프 상품요청
 * @param serviceType 서비스 타입
 * @param productURLPath API URL Path
 * @param codef Easycodef 인스턴스
 * @param param 요청 파라미터
 */
function requestProduct(serviceType, productURLPath, codef, param) {
    return new Promise(function (resolve, reject) {
        var options = createReqProductOptions(serviceType, productURLPath, codef);
        request_1.default
            .post(options, function (error, response) {
            if (error) {
                reject(error);
            }
            var result = '';
            // + 응답결과 처리
            if (response.statusCode === 200) {
                result = response.body ? decodeString(response.body) : response.body;
            }
            else {
                var bodyError = JSON.parse(response.body ? decodeString(response.body) : response.body).error;
                if (bodyError === 'invalid_token') {
                    result = bodyError;
                }
                else {
                    result = getErrorMsgResult(response.statusCode);
                }
            }
            resolve(result);
        })
            .write(encodeURIComponent(JSON.stringify(param)));
    });
}
exports.requestProduct = requestProduct;
/**
 * Response 상태 코드에 따라 에러 메시지 정보 가져오기
 * @param statusCode http 상태 코드
 */
function getErrorMsgResult(statusCode) {
    switch (statusCode) {
        case 401:
            return messageconstant_1.getResponseMessageConstant(messageconstant_1.UNAUTHORIZED);
        case 403:
            return messageconstant_1.getResponseMessageConstant(messageconstant_1.FORBIDDEN);
        case 404: // HTTP Status-Code 404: Not Found.
            return messageconstant_1.getResponseMessageConstant(messageconstant_1.NOT_FOUND);
        default:
            return messageconstant_1.getResponseMessageConstant(messageconstant_1.SERVER_ERROR);
    }
}
/**
 * 상품 요청 옵션 생성
 *
 * @param {ServiceType} serviceType
 * @param {string} productURLPath
 * @param {string} token
 */
function createReqProductOptions(serviceType, productURLPath, codef) {
    var options = {
        url: codef.getProductRequestURL(serviceType, productURLPath),
        headers: {
            'Content-Type': 'application/json',
        },
    };
    if (codef.getAccessToken(serviceType)) {
        options.headers.Authorization = "Bearer " + codef.getAccessToken(serviceType);
    }
    return options;
}
function setToken(serviceType, codef) {
    return __awaiter(this, void 0, void 0, function () {
        var i, token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (codef.getAccessToken(serviceType)) {
                        return [2 /*return*/];
                    }
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < constant_1.REPEAT_COUNT)) return [3 /*break*/, 4];
                    return [4 /*yield*/, requestToken(serviceType, codef)];
                case 2:
                    token = _a.sent();
                    if (token) {
                        codef.setAccessToken(serviceType, token);
                        return [3 /*break*/, 4];
                    }
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.setToken = setToken;
/**
 *  토큰발급 요청
 * @param serviceType
 * @param codef
 * @returns {Promise<unknown>}
 */
function requestToken(serviceType, codef) {
    return new Promise(function (resolve, reject) {
        // 클라이언트 정보 조회
        var _a = codef.getClientInfo(serviceType), clientID = _a.clientID, clientSecret = _a.clientSecret;
        // 옵션 셋팅
        var options = createReqTokenOptions(clientID, clientSecret);
        request_1.default
            .post(options, function (err, response) {
            if (err) {
                reject(err);
            }
            if (response && response.statusCode === 200) {
                var token = JSON.parse(response.body).access_token;
                resolve(token);
            }
            else {
                reject("Response status code " + response.statusCode);
            }
        })
            .write('grant_type=client_credentials&scope=read');
    });
}
exports.requestToken = requestToken;
/**
 * 토큰 요청 옵션 생성
 * @param {string} clientID
 * @param {string} clientSecret
 */
function createReqTokenOptions(clientID, clientSecret) {
    return {
        url: constant_1.OAUTH_DOMAIN + constant_1.GET_TOKEN,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
            Authorization: 'Basic ' +
                Buffer.from(clientID + ':' + clientSecret).toString('base64'),
        },
    };
}
/**
 *  서버 인코딩 응답 data 디코딩
 * @param str
 * @returns {string}
 */
function decodeString(str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    }
    catch (e) {
        return unescape(decodeURI(str));
    }
}
module.exports = {
    execute: execute,
    requestProduct: requestProduct,
    requestToken: requestToken,
};
