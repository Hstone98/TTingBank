"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasyCodef = void 0;
var constant_1 = require("./constant");
var accesstoken_1 = require("./accesstoken");
var properties_1 = require("./properties");
var messageconstant_1 = require("./messageconstant");
var connector_1 = require("./connector");
var debug_1 = __importDefault(require("debug"));
var log = debug_1.default('test');
/**
 * 코드에프의 쉬운 사용을 위한 유틸 라이브러리 클래스
 */
var EasyCodef = /** @class */ (function () {
    function EasyCodef() {
        this.properties = new properties_1.Properties();
        this.accessToken = new accesstoken_1.AccessToken();
    }
    /**
     * RSA 암호화를 위한 퍼블릭키 설정
     * @param key
     */
    EasyCodef.prototype.setPublicKey = function (publickey) {
        this.properties.setPublicKey(publickey);
    };
    /**
     *  RSA암호화를 위한 퍼블릭키
     */
    EasyCodef.prototype.getPublicKey = function () {
        return this.properties.getPublicKey();
    };
    /**
     * 정식서버 사용을 위한 클라이언트 정보 설정
     * @param realClientId
     * @param realClientSecret
     */
    EasyCodef.prototype.setClientInfo = function (clientID, clientSecret) {
        this.properties.setClientInfo(clientID, clientSecret);
    };
    /**
     * 데모서버 사용을 위한 클라이언트 정보 설정
     * @param demoClientId
     * @param demoClientSecret
     */
    EasyCodef.prototype.setClientInfoForDemo = function (clientID, clientSecret) {
        this.properties.setDemoClientInfo(clientID, clientSecret);
    };
    /**
     * 서비스별 토큰 설정
     * @param serviceType
     * @param token
     */
    EasyCodef.prototype.setAccessToken = function (serviceType, token) {
        this.accessToken.setToken(serviceType, token);
    };
    /**
     * 서비스별 토큰 가져오기
     * @param serviceType
     */
    EasyCodef.prototype.getAccessToken = function (serviceType) {
        return this.accessToken.getToken(serviceType);
    };
    /**
     * 클라이언트 정보 조회
     * @param {*} serviceType
     */
    EasyCodef.prototype.getClientInfo = function (serviceType) {
        return this.properties.getClientInfo(serviceType);
    };
    /**
     * 서비스 타입에 따른 클라이언트 정보 설정 확인
     * @returns {boolean}
     */
    EasyCodef.prototype.checkClientInfo = function (serviceType) {
        var _a = this.getClientInfo(serviceType), clientID = _a.clientID, clientSecret = _a.clientSecret;
        return !!(clientID && clientSecret);
    };
    /**
     * 상품 요청 URL
     * @param serviceType
     * @param productURL
     * @returns {string}
     */
    EasyCodef.prototype.getProductRequestURL = function (serviceType, productURL) {
        return this.properties.getProductRequestURL(serviceType, productURL);
    };
    /**
     * 상품 요청
     * @param productURL
     * @param serviceType
     * @param parameterMap
     */
    EasyCodef.prototype.requestProduct = function (productURL, serviceType, param) {
        // 1.필수 항목 체크 - 클라이언트 정보
        if (!this.checkClientInfo(serviceType)) {
            return new Promise(function (resolve) {
                return resolve(messageconstant_1.getResponseMessageConstant(messageconstant_1.EMPTY_CLIENT_INFO));
            });
        }
        // 2.필수 항목 체크 - 퍼블릭 키
        if (!this.getPublicKey()) {
            return new Promise(function (resolve) {
                return resolve(messageconstant_1.getResponseMessageConstant(messageconstant_1.EMPTY_PUBLIC_KEY));
            });
        }
        return connector_1.execute(this, serviceType, productURL, param);
    };
    /**
     * 상품 2way 추가인증 요청
     * @param productURL
     * @param serviceType
     * @param param
     */
    EasyCodef.prototype.requestCertification = function (productURL, serviceType, param) {
        // 1.필수 항목 체크 - 클라이언트 정보
        if (!this.checkClientInfo(serviceType)) {
            return new Promise(function (resolve) {
                return resolve(messageconstant_1.getResponseMessageConstant(messageconstant_1.EMPTY_CLIENT_INFO));
            });
        }
        // 2.필수 항목 체크 - 퍼블릭 키
        if (!this.getPublicKey()) {
            return new Promise(function (resolve) {
                return resolve(messageconstant_1.getResponseMessageConstant(messageconstant_1.EMPTY_PUBLIC_KEY));
            });
        }
        // 3. 추가인증 파라미터 필수 입력 체크
        if (!hasTwoWayInfo(param)) {
            return new Promise(function (resolve) {
                resolve(messageconstant_1.getResponseMessageConstant(messageconstant_1.INVALID_2WAY_INFO));
            });
        }
        return connector_1.execute(this, serviceType, productURL, param);
    };
    /**
     * 서비스별 (정식/데모/샌드박스)토큰발급 요청
     * @param serviceType
     */
    EasyCodef.prototype.requestToken = function (serviceType) {
        var token = this.getAccessToken(serviceType);
        if (token) {
            var parsedToken = parseAccessToken(token);
            if (checkTokenExpValidity(parsedToken['exp'])) {
                return new Promise(function (resolve) {
                    resolve(token);
                });
            }
        }
        return connector_1.requestToken(serviceType, this);
    };
    /**
     * 서비스별 계정 목록 조회
     * @param serviceType
     * @param paramMap
     */
    EasyCodef.prototype.getConnectedIdList = function (serviceType, param) {
        return this.requestProduct(constant_1.GET_CID_LIST, serviceType, param);
    };
    /**
     * connectedId 발급을 위한 계정 등록
     * @param serviceType
     * @param paramMap
     */
    EasyCodef.prototype.createAccount = function (serviceType, param) {
        return this.requestProduct(constant_1.CREATE_ACCOUNT, serviceType, param);
    };
    /**
     * connectedId로 등록된 계정 목록 조회
     * @param serviceType
     * @param paramMap
     */
    EasyCodef.prototype.getAccountList = function (serviceType, param) {
        return this.requestProduct(constant_1.GET_ACCOUNT_LIST, serviceType, param);
    };
    /**
     *  계정 정보 추가
     * @param serviceType
     * @param param
     */
    EasyCodef.prototype.addAccount = function (serviceType, param) {
        return this.requestProduct(constant_1.ADD_ACCOUNT, serviceType, param);
    };
    /**
     *  계정 정보 삭제
     * @param serviceType
     * @param param
     */
    EasyCodef.prototype.deleteAccount = function (serviceType, param) {
        return this.requestProduct(constant_1.DELETE_ACCOUNT, serviceType, param);
    };
    /**
     * Comment  : 계정 정보 수정
     * @param serviceType
     * @param param
     */
    EasyCodef.prototype.updateAccount = function (serviceType, param) {
        return this.requestProduct(constant_1.UPDATE_ACCOUNT, serviceType, param);
    };
    return EasyCodef;
}());
exports.EasyCodef = EasyCodef;
/**
 * 2way 상품 요청 시 필수 데이터 존재하는지 확인
 * @param param
 */
function hasTwoWayInfo(param) {
    return (param.is2Way &&
        param.twoWayInfo &&
        hasNeedValueInTwoWayInfo(param.twoWayInfo));
}
/**
 * twoWayInfo 정보 내부에 필요한 데이터가 존재하는지 체크
 * @param twoWayInfo
 */
function hasNeedValueInTwoWayInfo(twoWayInfo) {
    return ((twoWayInfo.jobIndex === 0 || twoWayInfo.jobIndex) &&
        (twoWayInfo.threadIndex === 0 || twoWayInfo.threadIndex) &&
        twoWayInfo.jti &&
        twoWayInfo.twoWayTimestamp);
}
/**
 * 토큰 파싱
 * @param token 액세스토큰
 */
function parseAccessToken(token) {
    var splitResult = token.split(/\./);
    var base64Str = splitResult[1];
    var decodedStr = Buffer.from(base64Str, 'base64').toString('utf8');
    return JSON.parse(decodedStr);
}
/**
 * 토큰 유효기간 검사
 * @param exp 토큰 유효기간
 */
function checkTokenExpValidity(exp) {
    var now = +new Date();
    var expMs = exp * 1000;
    return !(now > expMs || expMs - now < 1000 * 60 * 60);
}
